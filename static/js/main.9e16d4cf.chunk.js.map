{"version":3,"sources":["store/board.js","components/Data.js","components/TableRow.js","hooks/useWindowDimensions.js","components/Visualize.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/dijkstra.js","algorithms/astar.js","algorithms/bestFirstSearch.js","mazes/recursiveDivisionMaze.js","mazes/staircaseMaze.js","mazes/randomMaze.js","App.js","index.js"],"names":["initialState","i","j","boardSlice","createSlice","name","reducers","setClass","state","action","payload","id","class","animationSlice","visualizeOn","rows","cols","setRows","setCols","setVisualize","store","configureStore","reducer","board","animate","boardActions","actions","animationActions","Data","props","row","col","status","useSelector","dispatch","useDispatch","startClass","targetClass","unvisitedClass","wallClass","startBeingMoved","targetBeingMoved","visitedNodeClass","startVisitedNodeClass","targetVisitedNodeClass","shortestPathClass","classes","className","onClick","event","console","log","sessionStorage","setItem","getItem","onMouseEnter","buttons","onMouseDown","preventDefault","TableRow","tds","Array","from","length","map","value","idx","startCol","Math","floor","targetCol","rowStart","useWindowDimensions","useState","window","width","innerWidth","height","innerHeight","getWindowDimensions","windowDimensions","reachedEnd","nodesVisited","shortestPath","getNeighbours","s","data","queue","prevNodes","dr","dc","split","rr","cc","node","join","includes","push","bfs","prepareData","start","shift","target","reverse","getShortestPath","dfs","stack","pop","getMinimum","pq","keys","Object","minKey","key","neighs","dijkstra","dist","visited","m","neigh","newDist","getManhattanDist","t","x1","y1","x2","y2","abs","astar","gScore","fScore","heuristic","preProcessData","g_temp","bestFirstSearch","generateMaze","nodesToWalls","rowEnd","colStart","colEnd","orientation","surroundingWalls","forEach","r","parseInt","c","possibleRows","possibleCols","randomRow","random","randomCol","currentRow","colRandom","randomColIndex","randomRowIndex","currentCol","rowRandom","recursiveDivisionMaze","staircaseMaze","currentX","currentY","direction","RandomMaze","animateWallsMaze","index","setTimeout","Visualize","Navbar","style","backgroundColor","expand","Toggle","aria-controls","Collapse","wallNodes","entries","document","getElementById","replace","data-toggle","data-placement","title","type","innerHTML","algoSelected","innerText","animateShortestPathNodes","App","numCols","numRows","useEffect","color","fontSize","fontWeight","textAlign","ReactDOM","render"],"mappings":"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","file":"static/js/main.9e16d4cf.chunk.js","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {};\r\nfor (let i = 0; i < 30; i++) {\r\n    for (let j = 0; j < 70; j++) {\r\n        initialState[`d_${i}_${j}`] = \"unvisited\";\r\n    }\r\n}\r\n\r\nconst boardSlice = createSlice({\r\n    name: \"board\",\r\n    initialState,\r\n    reducers: {\r\n        setClass(state, action) {\r\n            state[action.payload.id] = action.payload.class;\r\n        },\r\n    },\r\n});\r\n\r\nconst initState = {\r\n    visualizeOn: false,\r\n    rows: 30,\r\n    cols: 70,\r\n};\r\n\r\nconst animationSlice = createSlice({\r\n    name: \"animate\",\r\n    initialState: initState,\r\n    reducers: {\r\n        setRows(state, action) {\r\n            state.rows = action.payload;\r\n        },\r\n        setCols(state, action) {\r\n            state.cols = action.payload;\r\n        },\r\n        setVisualize(state, action) {\r\n            state.visualizeOn = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nconst store = configureStore({\r\n    reducer: { board: boardSlice.reducer, animate: animationSlice.reducer },\r\n});\r\n\r\nexport const boardActions = boardSlice.actions;\r\nexport const animationActions = animationSlice.actions;\r\nexport default store;\r\n","import \"./Data.css\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { boardActions } from \"../store/board\";\r\n\r\nconst Data = (props) => {\r\n    const id = `d_${props.row}_${props.col}`;\r\n\r\n    const status = useSelector((state) => state.board[id]);\r\n    const visualizeOn = useSelector((state) => state.animate.visualizeOn);\r\n    //console.log(status);\r\n    const dispatch = useDispatch();\r\n\r\n    const startClass = `${status === \"start\" ? \"start\" : \"\"}`;\r\n    const targetClass = `${status === \"target\" ? \"target\" : \"\"}`;\r\n    const unvisitedClass = `${status === \"unvisited\" ? \"unvisited\" : \"\"}`;\r\n    const wallClass = `${status === \"wall\" ? \"wall\" : \"\"}`;\r\n    const startBeingMoved = `${\r\n        status === \"startBeingMoved\" ? \"startBeingMoved\" : \"\"\r\n    }`;\r\n    const targetBeingMoved = `${\r\n        status === \"targetBeingMoved\" ? \"targetBeingMoved\" : \"\"\r\n    }`;\r\n    const visitedNodeClass = `${status === \"visitedNode\" ? \"visitedNode\" : \"\"}`;\r\n    const startVisitedNodeClass = `${\r\n        status === \"start visitedNode\" ? \"start visitedNode\" : \"\"\r\n    }`;\r\n    const targetVisitedNodeClass = `${\r\n        status === \"target visitedNode\" ? \"target visitedNode\" : \"\"\r\n    }`;\r\n    const shortestPathClass = `${\r\n        status === \"shortestPath\" ? \"shortestPath\" : \"\"\r\n    }`;\r\n    const startShortestPathClass = `${\r\n        status === \"start shortestPath\" ? \"start shortestPath\" : \"\"\r\n    }`;\r\n    const targetShortestpathClass = `${\r\n        status === \"target shortestPath\" ? \"target shortestPath\" : \"\"\r\n    }`;\r\n    const classes =\r\n        startClass +\r\n        targetClass +\r\n        unvisitedClass +\r\n        wallClass +\r\n        startBeingMoved +\r\n        targetBeingMoved +\r\n        visitedNodeClass +\r\n        startVisitedNodeClass +\r\n        targetVisitedNodeClass +\r\n        startShortestPathClass +\r\n        targetShortestpathClass +\r\n        shortestPathClass;\r\n    //console.log(classes);\r\n\r\n    const onClickHandler = (event) => {\r\n        if (visualizeOn) return;\r\n        console.log(\"click\");\r\n        if (status === \"start\") {\r\n            sessionStorage.setItem(\"placeStart\", \"true\");\r\n            sessionStorage.setItem(\"startPrevious\", id);\r\n            dispatch(\r\n                boardActions.setClass({ id: id, class: \"startBeingMoved\" })\r\n            );\r\n        } else if (\r\n            status === \"unvisited\" &&\r\n            sessionStorage.getItem(\"placeStart\") === \"true\"\r\n        ) {\r\n            sessionStorage.setItem(\"placeStart\", \"false\");\r\n            dispatch(boardActions.setClass({ id: id, class: \"start\" }));\r\n            dispatch(\r\n                boardActions.setClass({\r\n                    id: sessionStorage.getItem(\"startPrevious\"),\r\n                    class: \"unvisited\",\r\n                })\r\n            );\r\n        } else if (status === \"target\") {\r\n            sessionStorage.setItem(\"placeTarget\", \"true\");\r\n            sessionStorage.setItem(\"targetPrevious\", id);\r\n            dispatch(\r\n                boardActions.setClass({ id: id, class: \"targetBeingMoved\" })\r\n            );\r\n        } else if (\r\n            status === \"unvisited\" &&\r\n            sessionStorage.getItem(\"placeTarget\") === \"true\"\r\n        ) {\r\n            sessionStorage.setItem(\"placeTarget\", \"false\");\r\n            dispatch(boardActions.setClass({ id: id, class: \"target\" }));\r\n            dispatch(\r\n                boardActions.setClass({\r\n                    id: sessionStorage.getItem(\"targetPrevious\"),\r\n                    class: \"unvisited\",\r\n                })\r\n            );\r\n        } else if (status === \"wall\") {\r\n            dispatch(boardActions.setClass({ id: id, class: \"unvisited\" }));\r\n        }\r\n    };\r\n\r\n    const onMouseDown = (event) => {\r\n        if (visualizeOn) return;\r\n        console.log(\"down\");\r\n        event.preventDefault();\r\n        if (\r\n            status === \"unvisited\" &&\r\n            sessionStorage.getItem(\"placeStart\") !== \"true\" &&\r\n            sessionStorage.getItem(\"placeTarget\") !== \"true\"\r\n        ) {\r\n            dispatch(boardActions.setClass({ id: id, class: \"wall\" }));\r\n        }\r\n    };\r\n    const onMouseEnter = (event) => {\r\n        if (visualizeOn) return;\r\n        if (event.buttons === 1 && status === \"unvisited\") {\r\n            dispatch(boardActions.setClass({ id: id, class: \"wall\" }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <td\r\n            id={id}\r\n            className={classes}\r\n            onClick={onClickHandler}\r\n            onMouseEnter={onMouseEnter}\r\n            onMouseDown={onMouseDown}></td>\r\n    );\r\n};\r\n\r\nexport default Data;\r\n","import Data from \"./Data\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { boardActions } from \"../store/board\";\r\n\r\nconst TableRow = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    let tds = Array.from({ length: +props.cols }).map((value, idx) => {\r\n        //console.log(startCol, targetCol);\r\n        let startCol = Math.floor(+props.cols / 2) - 6;\r\n        let targetCol = Math.floor(+props.cols / 2) + 6;\r\n        if (props.rowStart && idx === startCol) {\r\n            dispatch(\r\n                boardActions.setClass({\r\n                    id: `d_${props.row}_${idx}`,\r\n                    class: \"start\",\r\n                })\r\n            );\r\n        } else if (props.rowStart && idx === targetCol) {\r\n            dispatch(\r\n                boardActions.setClass({\r\n                    id: `d_${props.row}_${idx}`,\r\n                    class: \"target\",\r\n                })\r\n            );\r\n        }\r\n\r\n        return <Data key={idx} row={props.row} col={idx} />;\r\n    });\r\n    return <tr id={props.row}>{tds}</tr>;\r\n};\r\n\r\nexport default TableRow;\r\n","import { useState, useEffect } from \"react\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { boardActions } from \"../store/board\";\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return { width, height };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    //const dispatch = useDispatch();\r\n    const [windowDimensions, setWindowDimensions] = useState(\r\n        getWindowDimensions()\r\n    );\r\n    // useEffect(() => {\r\n    //     function handleResize() {\r\n    //         for (let i = 0; i < 30; i++) {\r\n    //             for (let j = 0; j < 70; j++) {\r\n    //                 dispatch(\r\n    //                     boardActions.setClass({\r\n    //                         id: `d_${i}_${j}`,\r\n    //                         class: \"unvisited\",\r\n    //                     })\r\n    //                 );\r\n    //             }\r\n    //         }\r\n    //         setWindowDimensions(getWindowDimensions());\r\n    //     }\r\n    //     window.addEventListener(\"resize\", handleResize);\r\n    //     return () => window.removeEventListener(\"resize\", handleResize);\r\n    // }, [dispatch]);\r\n\r\n    return windowDimensions;\r\n}\r\n","import { Navbar } from \"react-bootstrap\";\r\nimport \"./visualize.css\";\r\nimport bfs from \"../algorithms/bfs\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport dijkstra from \"../algorithms/dijkstra\";\r\nimport astar from \"../algorithms/astar\";\r\nimport bestFirstSearch from \"../algorithms/bestFirstSearch\";\r\nimport recursiveDivisionMaze from \"../mazes/recursiveDivisionMaze\";\r\nimport staircaseMaze from \"../mazes/staircaseMaze\";\r\nimport RandomMaze from \"../mazes/randomMaze\";\r\nimport { animationActions, boardActions } from \"../store/board\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst animateShortestPathNodes = (shortestPath, dispatch) => {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n            document.getElementById(\"clearPath\").className = document\r\n                .getElementById(\"clearPath\")\r\n                .className.replace(\"disabled\", \"\");\r\n            document.getElementById(\"clearBoard\").className = document\r\n                .getElementById(\"clearBoard\")\r\n                .className.replace(\"disabled\", \"\");\r\n\r\n            const node = shortestPath[i];\r\n            if (\r\n                document.getElementById(node).className === \"start visitedNode\"\r\n            ) {\r\n                document.getElementById(node).className = \"start shortestPath\";\r\n            } else if (\r\n                document.getElementById(node).className === \"target visitedNode\"\r\n            ) {\r\n                document.getElementById(node).className = \"target shortestPath\";\r\n            } else if (\r\n                document.getElementById(node).className === \"visitedNode\"\r\n            ) {\r\n                document.getElementById(node).className = \"shortestPath\";\r\n            }\r\n        }, 50 * i);\r\n    }\r\n};\r\n\r\nfunction animateWallsMaze(index, nodesToWalls, dispatch) {\r\n    setTimeout(() => {\r\n        if (index === nodesToWalls.length) {\r\n            return;\r\n        }\r\n        dispatch(\r\n            boardActions.setClass({\r\n                id: nodesToWalls[index],\r\n                class: \"wall\",\r\n            })\r\n        );\r\n        animateWallsMaze(index + 1, nodesToWalls, dispatch);\r\n    }, 5);\r\n}\r\n\r\nlet reachedEnd, nodesVisited, shortestPath;\r\nconst Visualize = () => {\r\n    const state = useSelector((state) => state);\r\n    //console.log(state);\r\n    const dispatch = useDispatch();\r\n\r\n    const onClickHandler = (event) => {\r\n        let algoSelected = event.target.innerText.split(\" \")[1];\r\n        if (algoSelected === \"BFS\") {\r\n            [reachedEnd, nodesVisited, shortestPath] = bfs(state);\r\n            console.log(nodesVisited, shortestPath);\r\n        } else if (algoSelected === \"Dijkstra\") {\r\n            [reachedEnd, nodesVisited, shortestPath] = dijkstra(state);\r\n            console.log(nodesVisited, shortestPath);\r\n        } else if (algoSelected === \"A*\") {\r\n            [reachedEnd, nodesVisited, shortestPath] = astar(state);\r\n            console.log(nodesVisited, shortestPath);\r\n        } else if (algoSelected === \"DFS\") {\r\n            [reachedEnd, nodesVisited, shortestPath] = dfs(state);\r\n            console.log(nodesVisited, shortestPath);\r\n        } else if (algoSelected === \"BestFS\") {\r\n            [reachedEnd, nodesVisited, shortestPath] = bestFirstSearch(state);\r\n            console.log(nodesVisited, shortestPath);\r\n        } else {\r\n            document.getElementById(\"visualize\").innerText =\r\n                \"Pick an Algorithm!\";\r\n            return;\r\n        }\r\n        document.getElementById(\"clearBoard\").className += \" disabled\";\r\n        document.getElementById(\"algo\").className += \" disabled\";\r\n        document.getElementById(\"visualize\").className += \" disabled\";\r\n        document.getElementById(\"maze\").className += \" disabled\";\r\n        document.getElementById(\"clearPath\").className += \" disabled\";\r\n        dispatch(animationActions.setVisualize(true));\r\n        for (let i = 0; i <= nodesVisited.length; i++) {\r\n            if (i === nodesVisited.length) {\r\n                setTimeout(() => {\r\n                    if (reachedEnd)\r\n                        animateShortestPathNodes(shortestPath, dispatch);\r\n                }, 20 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = nodesVisited[i];\r\n                if (state.board[node] === \"start\") {\r\n                    document.getElementById(node).className =\r\n                        \"start visitedNode\";\r\n                } else if (state.board[node] === \"target\") {\r\n                    document.getElementById(node).className =\r\n                        \"target visitedNode\";\r\n                } else {\r\n                    document.getElementById(node).className = \"visitedNode\";\r\n                }\r\n            }, 20 * i);\r\n        }\r\n    };\r\n\r\n    const onClearPath = () => {\r\n        for (let key of nodesVisited) {\r\n            if (\r\n                document.getElementById(key).className === \"start shortestPath\"\r\n            ) {\r\n                document.getElementById(key).className = \"start\";\r\n            } else if (\r\n                document.getElementById(key).className === \"target shortestPath\"\r\n            ) {\r\n                document.getElementById(key).className = \"target\";\r\n            } else if (\r\n                document.getElementById(key).className === \"shortestPath\" ||\r\n                document.getElementById(key).className === \"visitedNode\"\r\n            ) {\r\n                document.getElementById(key).className = \"unvisited\";\r\n            }\r\n        }\r\n        document.getElementById(\"algo\").className =\r\n            \"btn btn-primary dropdown-toggle shadow-none navButton\";\r\n        document.getElementById(\"visualize\").className = document\r\n            .getElementById(\"visualize\")\r\n            .className.replace(\"disabled\", \"\");\r\n        document.getElementById(\"maze\").className =\r\n            \"btn btn-primary dropdown-toggle shadow-none navButton\";\r\n\r\n        dispatch(animationActions.setVisualize(false));\r\n    };\r\n\r\n    const onClearBoard = (event) => {\r\n        let wallNodes = [];\r\n        for (let [key, value] of Object.entries(state.board)) {\r\n            if (value === \"wall\") wallNodes.push(key);\r\n            else if (value === \"start\" && document.getElementById(key))\r\n                document.getElementById(key).className = \"start\";\r\n            else if (value === \"target\" && document.getElementById(key))\r\n                document.getElementById(key).className = \"target\";\r\n            else if (document.getElementById(key))\r\n                document.getElementById(key).className = \"unvisited\";\r\n        }\r\n        for (let key of wallNodes) {\r\n            dispatch(boardActions.setClass({ id: key, class: \"unvisited\" }));\r\n        }\r\n\r\n        document.getElementById(\"algo\").className =\r\n            \"btn btn-primary dropdown-toggle shadow-none navButton\";\r\n        document.getElementById(\"visualize\").className = document\r\n            .getElementById(\"visualize\")\r\n            .className.replace(\"disabled\", \"\");\r\n        document.getElementById(\"maze\").className =\r\n            \"btn btn-primary dropdown-toggle shadow-none navButton\";\r\n\r\n        dispatch(animationActions.setVisualize(false));\r\n    };\r\n\r\n    const onBFS = (event) => {\r\n        document.getElementById(\"visualize\").innerHTML = \"Visualize BFS\";\r\n    };\r\n\r\n    const ondijkstra = (event) => {\r\n        document.getElementById(\"visualize\").innerHTML = \"Visualize Dijkstra\";\r\n    };\r\n\r\n    const onAstar = (event) => {\r\n        document.getElementById(\"visualize\").innerHTML = \"Visualize A*\";\r\n    };\r\n\r\n    const onGreedy = () => {\r\n        document.getElementById(\"visualize\").innerHTML = \"Visualize BestFS\";\r\n    };\r\n    const onDFS = () => {\r\n        document.getElementById(\"visualize\").innerHTML = \"Visualize DFS\";\r\n    };\r\n\r\n    const onRecursiveDivision = () => {\r\n        const nodesToWalls = recursiveDivisionMaze(state);\r\n        console.log(nodesToWalls);\r\n        animateWallsMaze(0, nodesToWalls, dispatch);\r\n    };\r\n\r\n    const onStaircase = () => {\r\n        const nodesToWalls = staircaseMaze(state);\r\n        animateWallsMaze(0, nodesToWalls, dispatch);\r\n    };\r\n\r\n    const onRandomMaze = () => {\r\n        const nodesToWalls = RandomMaze(state);\r\n        console.log(nodesToWalls);\r\n        animateWallsMaze(0, nodesToWalls, dispatch);\r\n    };\r\n\r\n    return (\r\n        <Navbar style={{ backgroundColor: \"#34495e\" }} expand=\"md\">\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <div className=\"container-fluid d-flex justify-content-center\">\r\n                    <div className=\"col-md d-flex justify-content-center\">\r\n                        <button\r\n                            id=\"clearBoard\"\r\n                            className=\"btn shadow-none navButton navs\"\r\n                            onClick={onClearBoard}\r\n                            data-toggle=\"tooltip\"\r\n                            data-placement=\"top\"\r\n                            title=\"Tooltip on top\">\r\n                            Clear Board\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-md d-flex justify-content-center\">\r\n                        <div className=\"dropdown\">\r\n                            <button\r\n                                id=\"algo\"\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary dropdown-toggle shadow-none navButton\"\r\n                                data-toggle=\"dropdown\">\r\n                                Algorithms\r\n                            </button>\r\n                            <ul className=\"dropdown-menu\">\r\n                                <li className=\"dropdown-item\" onClick={onBFS}>\r\n                                    Breadth First Search\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li className=\"dropdown-item\" onClick={onAstar}>\r\n                                    A* Algorithm\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={onGreedy}>\r\n                                    Best first Search{\" \"}\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={ondijkstra}>\r\n                                    Dijkstra's Algorithm\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li className=\"dropdown-item\" onClick={onDFS}>\r\n                                    Depth First Search\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md my-sm-2 d-flex justify-content-center\">\r\n                        <button\r\n                            id=\"visualize\"\r\n                            className=\"btn visualize shadow-none\"\r\n                            onClick={onClickHandler}>\r\n                            Visualize!\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"container col-md d-flex justify-content-center\">\r\n                        <div className=\"dropdown\">\r\n                            <button\r\n                                id=\"maze\"\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary dropdown-toggle shadow-none navButton\"\r\n                                data-toggle=\"dropdown\">\r\n                                Generate maze\r\n                            </button>\r\n                            <ul className=\"dropdown-menu\">\r\n                                <li\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={onRecursiveDivision}>\r\n                                    Recursive Division\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={onStaircase}>\r\n                                    Stair-case Maze\r\n                                </li>\r\n                                <div className=\"dropdown-divider\"></div>\r\n                                <li\r\n                                    className=\"dropdown-item\"\r\n                                    onClick={onRandomMaze}>\r\n                                    Random Maze\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md d-flex justify-content-center\">\r\n                        <button\r\n                            id=\"clearPath\"\r\n                            className=\"btn shadow-none navButton navs\"\r\n                            onClick={onClearPath}>\r\n                            Clear Path\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default Visualize;\r\n","const prepareData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") data[\"start\"] = id;\r\n            else if (state.board[id] === \"target\") data[\"target\"] = id;\r\n            else data[id] = state.board[id];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nconst getNeighbours = (s, data, queue, prevNodes, nodesVisited) => {\r\n    const dr = [-1, +1, 0, 0];\r\n    const dc = [0, 0, +1, -1];\r\n    const [d, row, col] = s.split(\"_\");\r\n    for (let i = 0; i < 4; i++) {\r\n        const rr = +row + dr[i];\r\n        const cc = +col + dc[i];\r\n\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= data.rows || cc >= data.cols) continue;\r\n\r\n        const node = [\"d\", rr, cc].join(\"_\");\r\n        if (nodesVisited.includes(node)) {\r\n            continue;\r\n        }\r\n        if (data[node] === \"wall\") continue;\r\n\r\n        nodesVisited.push(node);\r\n        prevNodes[node] = s;\r\n        queue.push(node);\r\n    }\r\n};\r\n\r\nconst getShortestPath = (target, prevNodes, reachedEnd) => {\r\n    let shortestPath = [];\r\n    if (!reachedEnd) {\r\n        shortestPath = [];\r\n        return;\r\n    }\r\n\r\n    let node = target;\r\n    while (node !== null) {\r\n        shortestPath.push(node);\r\n        node = prevNodes[node];\r\n    }\r\n    return shortestPath.reverse();\r\n};\r\n\r\nconst bfs = (state) => {\r\n    let shortestPath = [];\r\n    let nodesVisited = [];\r\n    let prevNodes = {};\r\n    let queue = [];\r\n    let reachedEnd = false;\r\n    let data = prepareData(state);\r\n    let s = data.start;\r\n    queue.push(s);\r\n    nodesVisited.push(s);\r\n    prevNodes[s] = null;\r\n    while (queue.length !== 0) {\r\n        s = queue.shift();\r\n        if (s === data.target) {\r\n            nodesVisited.push(s);\r\n            reachedEnd = true;\r\n            break;\r\n        }\r\n        getNeighbours(s, data, queue, prevNodes, nodesVisited);\r\n    }\r\n    shortestPath = getShortestPath(data.target, prevNodes, reachedEnd);\r\n\r\n    return [reachedEnd, nodesVisited, shortestPath];\r\n};\r\n\r\nexport default bfs;\r\n","const prepareData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") data[\"start\"] = id;\r\n            else if (state.board[id] === \"target\") data[\"target\"] = id;\r\n            else data[id] = state.board[id];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nconst getNeighbours = (s, data, queue, prevNodes, nodesVisited) => {\r\n    const dr = [0, +1, 0, -1];\r\n    const dc = [-1, 0, +1, 0];\r\n    const [d, row, col] = s.split(\"_\");\r\n    for (let i = 0; i < 4; i++) {\r\n        const rr = +row + dr[i];\r\n        const cc = +col + dc[i];\r\n\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= data.rows || cc >= data.cols) continue;\r\n\r\n        const node = [\"d\", rr, cc].join(\"_\");\r\n        if (nodesVisited.includes(node)) {\r\n            continue;\r\n        }\r\n        if (data[node] === \"wall\") continue;\r\n\r\n        //nodesVisited.push(node);\r\n        prevNodes[node] = s;\r\n        queue.push(node);\r\n    }\r\n};\r\n\r\nconst getShortestPath = (target, prevNodes, reachedEnd) => {\r\n    let shortestPath = [];\r\n    if (!reachedEnd) {\r\n        shortestPath = [];\r\n        return;\r\n    }\r\n\r\n    let node = target;\r\n    while (node !== null) {\r\n        shortestPath.push(node);\r\n        node = prevNodes[node];\r\n    }\r\n    return shortestPath.reverse();\r\n};\r\n\r\nconst dfs = (state) => {\r\n    let shortestPath = [];\r\n    let nodesVisited = [];\r\n    let prevNodes = {};\r\n    let stack = [];\r\n    let reachedEnd = false;\r\n    let data = prepareData(state);\r\n    let s = data.start;\r\n    stack.push(s);\r\n    nodesVisited.push(s);\r\n    prevNodes[s] = null;\r\n    while (stack.length !== 0) {\r\n        s = stack.pop();\r\n        nodesVisited.push(s);\r\n        if (s === data.target) {\r\n            //nodesVisited.push(s);\r\n            reachedEnd = true;\r\n            break;\r\n        }\r\n        getNeighbours(s, data, stack, prevNodes, nodesVisited);\r\n    }\r\n    shortestPath = getShortestPath(data.target, prevNodes, reachedEnd);\r\n    return [reachedEnd, nodesVisited, shortestPath];\r\n};\r\n\r\nexport default dfs;\r\n","const prepareData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n    let dist = {};\r\n    let visited = {};\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") {\r\n                data[\"start\"] = id;\r\n                dist[id] = 0;\r\n            } else if (state.board[id] === \"target\") {\r\n                dist[id] = null;\r\n                data[\"target\"] = id;\r\n            } else {\r\n                dist[id] = null;\r\n                data[id] = state.board[id];\r\n            }\r\n            visited[id] = false;\r\n        }\r\n    }\r\n    return [data, dist, visited];\r\n};\r\n\r\nconst getMinimum = (pq) => {\r\n    let keys = Object.keys(pq);\r\n    let minKey = keys[0];\r\n    for (let key of keys) {\r\n        if (pq[key] < pq[minKey]) minKey = key;\r\n    }\r\n    delete pq[minKey];\r\n    return minKey;\r\n};\r\n\r\nconst getNeighbours = (s, data) => {\r\n    let neighs = [];\r\n    const dr = [-1, +1, 0, 0];\r\n    const dc = [0, 0, +1, -1];\r\n    const [d, row, col] = s.split(\"_\");\r\n    for (let i = 0; i < 4; i++) {\r\n        const rr = +row + dr[i];\r\n        const cc = +col + dc[i];\r\n\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= data.rows || cc >= data.cols) continue;\r\n\r\n        const node = [\"d\", rr, cc].join(\"_\");\r\n        if (data[node] === \"wall\") continue;\r\n        neighs.push(node);\r\n    }\r\n    return neighs;\r\n};\r\n\r\nconst getShortestPath = (target, prevNodes, reachedEnd) => {\r\n    if (!reachedEnd) return [];\r\n    let shortestPath = [];\r\n    let node = target;\r\n    while (node !== null) {\r\n        shortestPath.push(node);\r\n        node = prevNodes[node];\r\n    }\r\n    return shortestPath.reverse();\r\n};\r\n\r\nconst dijkstra = (state) => {\r\n    let [data, dist, visited] = prepareData(state);\r\n    let nodesVisited = [];\r\n    let prevNodes = {};\r\n    let reachedEnd = false;\r\n    let pq = {};\r\n    pq[data.start] = 0;\r\n    prevNodes[data.start] = null;\r\n    while (Object.keys(pq).length !== 0) {\r\n        let m = getMinimum(pq);\r\n        visited[m] = true;\r\n        nodesVisited.push(m);\r\n        let neighs = getNeighbours(m, data);\r\n        for (let neigh of neighs) {\r\n            if (visited[neigh]) continue;\r\n            let newDist = dist[m] + 1;\r\n            if (dist[neigh] === null || newDist < dist[neigh]) {\r\n                prevNodes[neigh] = m;\r\n                dist[neigh] = newDist;\r\n                pq[neigh] = newDist;\r\n            }\r\n        }\r\n        if (m === data.target) {\r\n            reachedEnd = true;\r\n            break;\r\n        }\r\n    }\r\n    let shortestPath = getShortestPath(data.target, prevNodes, reachedEnd);\r\n    return [reachedEnd, nodesVisited, shortestPath];\r\n};\r\n\r\nexport default dijkstra;\r\n","const getManhattanDist = (s, t) => {\r\n    const [, x1, y1] = s.split(\"_\");\r\n    const [, x2, y2] = t.split(\"_\");\r\n    return Math.abs(+x1 - +x2) + Math.abs(+y1 - +y2);\r\n};\r\n\r\nconst preProcessData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n    let gScore = {};\r\n    let fScore = {};\r\n    let heuristic = {};\r\n    let visited = {};\r\n    //let visited = {};\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"target\") {\r\n                data[\"target\"] = id;\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") {\r\n                data[\"start\"] = id;\r\n                gScore[id] = 0;\r\n                heuristic[id] = getManhattanDist(id, data.target);\r\n                fScore[id] = heuristic[id];\r\n            } else if (state.board[id] === \"target\") {\r\n                gScore[id] = null;\r\n                data[\"target\"] = id;\r\n                heuristic[id] = 0;\r\n                fScore[id] = null;\r\n            } else {\r\n                gScore[id] = null;\r\n                data[id] = state.board[id];\r\n                heuristic[id] = getManhattanDist(id, data.target);\r\n                fScore[id] = null;\r\n            }\r\n            visited[id] = false;\r\n        }\r\n    }\r\n    return [data, gScore, heuristic, fScore, visited];\r\n};\r\n\r\nconst getNeighbours = (s, data) => {\r\n    let neighs = [];\r\n    const dr = [-1, +1, 0, 0];\r\n    const dc = [0, 0, +1, -1];\r\n    const [d, row, col] = s.split(\"_\");\r\n    for (let i = 0; i < 4; i++) {\r\n        const rr = +row + dr[i];\r\n        const cc = +col + dc[i];\r\n\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= data.rows || cc >= data.cols) continue;\r\n\r\n        const node = [\"d\", rr, cc].join(\"_\");\r\n        if (data[node] === \"wall\") continue;\r\n        neighs.push(node);\r\n    }\r\n\r\n    return neighs;\r\n};\r\n\r\nconst getShortestPath = (target, prevNodes, reachedEnd) => {\r\n    if (!reachedEnd) return [];\r\n    let shortestPath = [];\r\n    let node = target;\r\n    while (node !== null) {\r\n        shortestPath.push(node);\r\n        node = prevNodes[node];\r\n    }\r\n    return shortestPath.reverse();\r\n};\r\n\r\nconst getMinimum = (pq) => {\r\n    let keys = Object.keys(pq);\r\n    let minKey = keys[0];\r\n    for (let key of keys) {\r\n        if (pq[key] < pq[minKey]) minKey = key;\r\n    }\r\n    delete pq[minKey];\r\n    return minKey;\r\n};\r\n\r\nconst astar = (state) => {\r\n    const [data, gScore, heuristic, fScore, visited] = preProcessData(state);\r\n    let prevNodes = {};\r\n    let pq = {};\r\n    let reachedEnd = false;\r\n    pq[data.start] = fScore[data.start];\r\n    prevNodes[data.start] = null;\r\n    let nodesVisited = [];\r\n    while (Object.keys(pq).length !== 0) {\r\n        let m = getMinimum(pq);\r\n        visited[m] = true;\r\n        nodesVisited.push(m);\r\n        let neighs = getNeighbours(m, data);\r\n        //console.log(neighs);\r\n        for (let neigh of neighs) {\r\n            if (visited[neigh]) continue;\r\n            let g_temp = gScore[m] + 1;\r\n            if (gScore[neigh] === null || g_temp < gScore[neigh]) {\r\n                prevNodes[neigh] = m;\r\n                gScore[neigh] = g_temp;\r\n                fScore[neigh] = gScore[neigh] + heuristic[neigh];\r\n                //console.log(Object.keys(pq));\r\n                if (Object.keys(pq).includes(neigh) === false) {\r\n                    pq[neigh] = fScore[neigh];\r\n                }\r\n            }\r\n        }\r\n        if (m === data.target) {\r\n            reachedEnd = true;\r\n            break;\r\n        }\r\n    }\r\n    let shortestPath = getShortestPath(data.target, prevNodes, reachedEnd);\r\n    return [reachedEnd, nodesVisited, shortestPath];\r\n};\r\nexport default astar;\r\n","const getManhattanDist = (s, t) => {\r\n    const [, x1, y1] = s.split(\"_\");\r\n    const [, x2, y2] = t.split(\"_\");\r\n    return Math.abs(+x1 - +x2) + Math.abs(+y1 - +y2);\r\n};\r\n\r\nconst preProcessData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n    let gScore = {};\r\n    let fScore = {};\r\n    let heuristic = {};\r\n    let visited = {};\r\n    //let visited = {};\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"target\") {\r\n                data[\"target\"] = id;\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") {\r\n                data[\"start\"] = id;\r\n                gScore[id] = 0;\r\n                heuristic[id] = getManhattanDist(id, data.target);\r\n                fScore[id] = heuristic[id];\r\n            } else if (state.board[id] === \"target\") {\r\n                gScore[id] = null;\r\n                data[\"target\"] = id;\r\n                heuristic[id] = 0;\r\n                fScore[id] = null;\r\n            } else {\r\n                gScore[id] = null;\r\n                data[id] = state.board[id];\r\n                heuristic[id] = getManhattanDist(id, data.target);\r\n                fScore[id] = null;\r\n            }\r\n            visited[id] = false;\r\n        }\r\n    }\r\n    return [data, gScore, heuristic, fScore, visited];\r\n};\r\n\r\nconst getNeighbours = (s, data) => {\r\n    let neighs = [];\r\n    const dr = [-1, +1, 0, 0];\r\n    const dc = [0, 0, +1, -1];\r\n    const [d, row, col] = s.split(\"_\");\r\n    for (let i = 0; i < 4; i++) {\r\n        const rr = +row + dr[i];\r\n        const cc = +col + dc[i];\r\n\r\n        if (rr < 0 || cc < 0) continue;\r\n        if (rr >= data.rows || cc >= data.cols) continue;\r\n\r\n        const node = [\"d\", rr, cc].join(\"_\");\r\n        if (data[node] === \"wall\") continue;\r\n        neighs.push(node);\r\n    }\r\n\r\n    return neighs;\r\n};\r\n\r\nconst getShortestPath = (target, prevNodes, reachedEnd) => {\r\n    if (!reachedEnd) return [];\r\n    let shortestPath = [];\r\n    let node = target;\r\n    while (node !== null) {\r\n        shortestPath.push(node);\r\n        node = prevNodes[node];\r\n    }\r\n    return shortestPath.reverse();\r\n};\r\n\r\nconst getMinimum = (pq) => {\r\n    let keys = Object.keys(pq);\r\n    let minKey = keys[0];\r\n    for (let key of keys) {\r\n        if (pq[key] < pq[minKey]) minKey = key;\r\n    }\r\n    delete pq[minKey];\r\n    return minKey;\r\n};\r\n\r\nconst bestFirstSearch = (state) => {\r\n    const [data, gScore, heuristic, fScore, visited] = preProcessData(state);\r\n    let prevNodes = {};\r\n    let pq = {};\r\n    let reachedEnd = false;\r\n    pq[data.start] = fScore[data.start];\r\n    prevNodes[data.start] = null;\r\n    let nodesVisited = [];\r\n    while (Object.keys(pq).length !== 0) {\r\n        let m = getMinimum(pq);\r\n        visited[m] = true;\r\n        nodesVisited.push(m);\r\n        let neighs = getNeighbours(m, data);\r\n        //console.log(neighs);\r\n        for (let neigh of neighs) {\r\n            if (visited[neigh]) continue;\r\n            let g_temp = gScore[m] + 1;\r\n            if (gScore[neigh] === null || g_temp < gScore[neigh]) {\r\n                prevNodes[neigh] = m;\r\n                gScore[neigh] = g_temp;\r\n                fScore[neigh] = heuristic[neigh];\r\n                //console.log(Object.keys(pq));\r\n                if (Object.keys(pq).includes(neigh) === false) {\r\n                    pq[neigh] = fScore[neigh];\r\n                }\r\n            }\r\n        }\r\n        if (m === data.target) {\r\n            reachedEnd = true;\r\n            break;\r\n        }\r\n    }\r\n    let shortestPath = getShortestPath(data.target, prevNodes, reachedEnd);\r\n    return [reachedEnd, nodesVisited, shortestPath];\r\n};\r\nexport default bestFirstSearch;\r\n","const prepareData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") data[\"start\"] = id;\r\n            else if (state.board[id] === \"target\") data[\"target\"] = id;\r\n            else data[id] = state.board[id];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nconst generateMaze = (\r\n    data,\r\n    nodesToWalls,\r\n    rowStart,\r\n    rowEnd,\r\n    colStart,\r\n    colEnd,\r\n    orientation,\r\n    surroundingWalls\r\n) => {\r\n    if (rowEnd < rowStart || colEnd < colStart) return;\r\n\r\n    if (!surroundingWalls) {\r\n        Object.keys(data).forEach((node) => {\r\n            if (data[node] !== \"start\" || data[node] !== \"target\") {\r\n                let r = parseInt(node.split(\"_\")[1]);\r\n                let c = parseInt(node.split(\"_\")[2]);\r\n                if (\r\n                    r === 0 ||\r\n                    c === 0 ||\r\n                    r === data.rows - 1 ||\r\n                    c === data.cols - 1\r\n                ) {\r\n                    nodesToWalls.push(node);\r\n                }\r\n            }\r\n        });\r\n        surroundingWalls = true;\r\n    }\r\n    if (orientation === \"horizontal\") {\r\n        let possibleRows = [];\r\n        for (let i = rowStart; i <= rowEnd; i += 2) possibleRows.push(i);\r\n        let possibleCols = [];\r\n        for (let i = colStart - 1; i <= colEnd + 1; i += 2)\r\n            possibleCols.push(i);\r\n        let randomRow = Math.floor(Math.random() * (possibleRows.length + 1));\r\n        let randomCol = Math.floor(Math.random() * (possibleCols.length + 1));\r\n        let currentRow = possibleRows[randomRow];\r\n        let colRandom = possibleCols[randomCol];\r\n        Object.keys(data).forEach((node) => {\r\n            let r = parseInt(node.split(\"_\")[1]);\r\n            let c = parseInt(node.split(\"_\")[2]);\r\n            if (\r\n                r === currentRow &&\r\n                c !== colRandom &&\r\n                c >= colStart - 1 &&\r\n                c <= colEnd + 1\r\n            ) {\r\n                nodesToWalls.push(node);\r\n            }\r\n        });\r\n        if (currentRow - 2 - rowStart > colEnd - colStart) {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                currentRow - 2,\r\n                colStart,\r\n                colEnd,\r\n                orientation,\r\n                surroundingWalls\r\n            );\r\n        } else {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                currentRow - 2,\r\n                colStart,\r\n                colEnd,\r\n                \"vertical\",\r\n                surroundingWalls\r\n            );\r\n        }\r\n\r\n        if (rowEnd - (currentRow + 2) > colStart - colEnd) {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                currentRow + 2,\r\n                rowEnd,\r\n                colStart,\r\n                colEnd,\r\n                orientation,\r\n                surroundingWalls\r\n            );\r\n        } else {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                currentRow + 2,\r\n                rowEnd,\r\n                colStart,\r\n                colEnd,\r\n                \"vertical\",\r\n                surroundingWalls\r\n            );\r\n        }\r\n    } else {\r\n        let possibleCols = [];\r\n        for (let i = colStart; i <= colEnd; i += 2) {\r\n            possibleCols.push(i);\r\n        }\r\n        let possibleRows = [];\r\n        for (let i = rowStart - 1; i <= rowEnd + 1; i += 2) {\r\n            possibleRows.push(i);\r\n        }\r\n        let randomColIndex = Math.floor(Math.random() * possibleCols.length);\r\n        let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\r\n        let currentCol = possibleCols[randomColIndex];\r\n        let rowRandom = possibleRows[randomRowIndex];\r\n        Object.keys(data).forEach((node) => {\r\n            let r = parseInt(node.split(\"_\")[1]);\r\n            let c = parseInt(node.split(\"_\")[2]);\r\n            if (\r\n                c === currentCol &&\r\n                r !== rowRandom &&\r\n                r >= rowStart - 1 &&\r\n                r <= rowEnd + 1\r\n            ) {\r\n                nodesToWalls.push(node);\r\n            }\r\n        });\r\n        if (rowEnd - rowStart > currentCol - 2 - colStart) {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                rowEnd,\r\n                colStart,\r\n                currentCol - 2,\r\n                \"horizontal\",\r\n                surroundingWalls\r\n            );\r\n        } else {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                rowEnd,\r\n                colStart,\r\n                currentCol - 2,\r\n                orientation,\r\n                surroundingWalls\r\n            );\r\n        }\r\n        if (rowEnd - rowStart > colEnd - (currentCol + 2)) {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                rowEnd,\r\n                currentCol + 2,\r\n                colEnd,\r\n                \"horizontal\",\r\n                surroundingWalls\r\n            );\r\n        } else {\r\n            generateMaze(\r\n                data,\r\n                nodesToWalls,\r\n                rowStart,\r\n                rowEnd,\r\n                currentCol + 2,\r\n                colEnd,\r\n                orientation,\r\n                surroundingWalls\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nconst recursiveDivisionMaze = (state) => {\r\n    let data = prepareData(state);\r\n    let nodesToWalls = [];\r\n    generateMaze(\r\n        data,\r\n        nodesToWalls,\r\n        2,\r\n        data.rows - 3,\r\n        2,\r\n        data.cols - 3,\r\n        \"horizontal\",\r\n        false\r\n    );\r\n    return nodesToWalls;\r\n};\r\n\r\nexport default recursiveDivisionMaze;\r\n","const prepareData = (state) => {\r\n    let data = { rows: state.animate.rows, cols: state.animate.cols };\r\n\r\n    for (let i = 0; i < data.rows; i++) {\r\n        for (let j = 0; j < data.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            if (state.board[id] === \"start\") data[\"start\"] = id;\r\n            else if (state.board[id] === \"target\") data[\"target\"] = id;\r\n            else data[id] = state.board[id];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nconst staircaseMaze = (state) => {\r\n    let data = prepareData(state);\r\n    let nodesToWalls = [];\r\n    let currentX = Math.floor(Math.random() * data.rows);\r\n    let currentY = 1;\r\n    let directions = [\"up\", \"down\"];\r\n    let direction = directions[Math.floor(Math.random() * 2)];\r\n    while (currentY < data.cols - 1) {\r\n        if (direction === \"up\") {\r\n            while (currentX >= 2 && currentY < data.cols - 1) {\r\n                let id = `d_${currentX}_${currentY}`;\r\n                nodesToWalls.push(id);\r\n                currentX--;\r\n                currentY++;\r\n            }\r\n            direction = \"down\";\r\n        } else {\r\n            while (currentX <= data.rows - 3 && currentY < data.cols - 1) {\r\n                let id = `d_${currentX}_${currentY}`;\r\n                nodesToWalls.push(id);\r\n                currentX++;\r\n                currentY++;\r\n            }\r\n            direction = \"up\";\r\n        }\r\n    }\r\n    return nodesToWalls;\r\n};\r\nexport default staircaseMaze;\r\n","const prepareData = (state) => {\r\n    let data = {};\r\n    for (let i = 0; i < state.animate.rows; i++) {\r\n        for (let j = 0; j < state.animate.cols; j++) {\r\n            let id = [\"d\", i, j].join(\"_\");\r\n            data[id] = state.board[id];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nconst RandomMaze = (state) => {\r\n    let data = prepareData(state);\r\n\r\n    let nodesToWalls = [];\r\n    Object.keys(data).forEach((node) => {\r\n        let randomOne = Math.random();\r\n        let randomTwo = 0.25;\r\n        let discardClasses = [\"start\", \"target\", \"wall\"];\r\n        if (randomOne < randomTwo && !discardClasses.includes(data[node])) {\r\n            nodesToWalls.push(node);\r\n        }\r\n    });\r\n    return nodesToWalls;\r\n};\r\n\r\nexport default RandomMaze;\r\n","import TableRow from \"./components/TableRow\";\nimport useWindowDimensions from \"./hooks/useWindowDimensions\";\nimport Visualize from \"./components/Visualize\";\nimport { animationActions } from \"./store/board\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { boardActions } from \"./store/board\";\nimport \"./App.css\";\n\nfunction App() {\n    const { height, width } = useWindowDimensions();\n\n    const dispatch = useDispatch();\n\n    let numCols = Math.floor(width / 25) + 1;\n    let numRows = Math.floor(height / 25) - 4;\n    useEffect(() => {\n        dispatch(animationActions.setRows(numRows));\n        dispatch(animationActions.setCols(numCols));\n    }, []);\n    //console.log(numRows, numCols);\n    return (\n        <>\n            <div\n                className=\"container-fluid pt-2\"\n                style={{\n                    backgroundColor: \"#34495e\",\n                    color: \"white\",\n                    fontSize: \"x-large\",\n                    fontWeight: \"bolder\",\n                    textAlign: \"center\",\n                }}>\n                Pathfinding Visualizer\n            </div>\n            <Visualize></Visualize>\n            <table>\n                <tbody>\n                    {Array.from({ length: numRows }).map((value, idx) => {\n                        return (\n                            <TableRow\n                                key={idx}\n                                cols={numCols}\n                                row={idx}\n                                rowStart={idx === 10 ? true : null}\n                            />\n                        );\n                    })}\n                </tbody>\n            </table>\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store/board\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}